---
# tasks file for assosicate_ct


- name: set connection templates initialize
  ansible.builtin.set_fact:
    cts: []

- name: set connection templates initialize
  ansible.builtin.set_fact:
    cts_tagged: []
    vlans_tagged: []

- name: initialize cts_untagged
  ansible.builtin.set_fact:
    ct_untagged: ""

- name: show cts untagged
  ansible.builtin.debug:
    msg: "{{ ct_untagged }}"


- name: set untagged ct name
  ansible.builtin.set_fact:
    ct_untagged: "Untagged VxLAN '{{ vnimap | get_vni_name_from_vlanid(indvport['port vlan']) }}'"
  when: indvport['port vlan'] != ""



- name: show preparse data
  ansible.builtin.debug:
    msg: "{{ vnimap | get_vni_name_from_vlanid(item) }}"  
  loop: "{{ indvport['trunk allowed vlans'] | split(',')  }}"

- name: set if it has tagged vlan
  ansible.builtin.set_fact:
    vlans_tagged: "{{ vlans_tagged + [ item ] }}"  
  loop: "{{ indvport['trunk allowed vlans'] | split(',') }}"
  when: 
    - indvport['trunk allowed vlans'] != ""
  ignore_errors: True 

- name: show port
  ansible.builtin.debug:
    msg: "{{ indvport }}"


- name: set cts tagged
  ansible.builtin.set_fact:
    cts_tagged: "{{ vnimap | get_vni_names_from_vlanids(vlans_tagged)  }}"



- name: show cts_tagged
  ansible.builtin.debug:
    msg: "{{ cts_tagged }}"
- name: set indvhost to indvport
  ansible.builtin.set_fact:
    indvhost: "{{ indvport }}"

- name: include to get interface ids
  ansible.builtin.include_role:
    name: collect_interface_ids_of_host



- name: include associate_ct role
  ansible.builtin.include_role:
    name: assosicate_ct_request
  loop: "{{ cts_tagged }}"
  loop_control:
    loop_var: ct_name 

- name: include associate_ct role untagged
  ansible.builtin.include_role:
    name: assosicate_ct_request
  vars:
    ct_name: "{{ ct_untagged }}"
  when: ct_untagged != ""
