---
# tasks file for assosicate_ct

- name: query to collect interface with tags
  ansible.builtin.uri:
    url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/obj-policy-application-points"
    method: POST
    return_content: yes
    status_code: 201
    headers:
      Content-Type: "application/json"
      AUTHTOKEN: "{{ login.json.token }}"
    validate_certs: false
    #          body: { 'interface_tags': '{{ interface_tag }}' }
    force_basic_auth: yes
    body_format: json
  register: qry
  ignore_errors: true
  run_once: True




- name: setvariables
  ansible.builtin.set_fact:
    leaf_label: "{{ indvport['SWITCH'] }}"


- name: setvariables
  ansible.builtin.set_fact:
    interface_label: "{{ indvport['PORT'] }}"



- name: set extracted data variable
  ansible.builtin.set_fact:
    tagged_ifs: "{{ qry.json.application_points | extract_nested_children  }}"


- name: set flatten interface list
  ansible.builtin.set_fact:
    flatten_if_list: "{{ tagged_ifs['children'] | flatten_children_list_to_ifs }}"   

- name: get interfaces_ids empty list
  ansible.builtin.set_fact:
    interface_ids: []


- name: get interfaces to be associated with connectivity template
  ansible.builtin.set_fact:
    interface_ids: "{{ interface_ids + [ item.interface_aep_id ] }}"
  when: 
    - '"{{ interface_label }}" in item.interface_aep_label'
    - '"{{ leaf_label }}" in item.sw_label'
  loop: "{{ flatten_if_list }}"

- name: set connection templates initialize
  ansible.builtin.set_fact:
    cts: []

- name: set connection templates initialize
  ansible.builtin.set_fact:
    cts_tagged: []


- name: set untagged ct name
  ansible.builtin.set_fact:
    ct_untagged: "Untagged VxLAN '{{ vnimap | get_vni_name_from_vlanid(indvport['port vlan']) }}'"
  when: indvport['port vlan'] != ""

- name: show preparse data
  ansible.builtin.debug:
    msg: "{{ vnimap | get_vni_name_from_vlanid(item) }}"  
  loop: "{{ indvport['trunk allowed vlans'] | split(',')  }}"

- name: set if it has tagged vlan
  ansible.builtin.set_fact:
    cts_tagged: "{{ cts_tagged + [ \"Tagged VxLAN\" + \'+(vnimap | get_vni_name_from_vlanid(item) | string )+\' ] }}"  
  loop: "{{ indvport['trunk allowed vlans'] | split(',') }}"
  when: 
    - indvport['trunk allowed vlans'] != ""
  ignore_errors: True 

- name: show port
  ansible.builtin.debug:
    msg: "{{ indvport }}"

- name: show cts untagged
  ansible.builtin.debug:
    msg: "{{ ct_untagged }}"

- name: show cts tagged
  ansible.builtin.debug:
    msg: "{{ cts_tagged }}"




